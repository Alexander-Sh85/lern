user nginx;
	
#daemon off;

# Set number of worker processes automatically based on number of CPU cores.
worker_processes auto;

worker_rlimit_nofile 20480;

# Enables the use of JIT for regular expressions to speed-up their processing.
pcre_jit on;

# Configures default error logger.
error_log /var/log/nginx/error.log warn;

# Includes files with directives to load dynamic modules.
include /etc/nginx/modules/*.conf;


events {
	# The maximum number of simultaneous connections that can be opened by
	# a worker process.
	worker_connections 4096;
	multi_accept on;
}

http {
	# Includes mapping of file name extensions to MIME types of responses
	# and defines the default type.
	include /etc/nginx/mime.types;
	default_type application/octet-stream;

	# Name servers used to resolve names of upstream servers into addresses.
	# It's also needed when using tcpsocket and udpsocket in Lua modules.
	#resolver 208.67.222.222 208.67.220.220;

	# Don't tell nginx version to clients.
	server_tokens off;

	# Specifies the maximum accepted body size of a client request, as
	# indicated by the request header Content-Length. If the stated content
	# length is greater than this size, then the client receives the HTTP
	# error code 413. Set to 0 to disable.
	client_max_body_size 1m;

	# Ждать 10 секунд тело запроса от клиента, после чего сбросить соединение
	client_body_timeout 10s;

	# Timeout for keep-alive connections. Server will close connections after
	# this time.
	keepalive_timeout 60;

	# Sets the maximum number of requests that can be served through one keep-alive connection. 
	# After the maximum number of requests are made, the connection is closed.
	keepalive_requests 1000;

	# Sendfile copies data between one FD and other from within the kernel,
	# which is more efficient than read() + write().
	sendfile on;

	# Don't buffer data-sends (disable Nagle algorithm).
	# Good for sending frequent small bursts of data in real time.
	tcp_nodelay on;

	# Causes nginx to attempt to send its HTTP response head in one packet,
	# instead of using partial frames.
	tcp_nopush on;

	# Если клиент перестал читать отвечать, Nginx будет сбрасывать соединение с ним
	reset_timedout_connection on;

	# Если клиент прекратит чтение ответа, Nginx подождет 10 секунд и сбросит соединение
	send_timeout 10;

	# Path of the file with Diffie-Hellman parameters for EDH ciphers.
	#ssl_dhparam /etc/ssl/nginx/dh2048.pem;

	# Specifies that our cipher suits should be preferred over client ciphers.
	ssl_prefer_server_ciphers on;

	# Enables a shared SSL cache with size that can hold around 32000 sessions.
	ssl_session_cache shared:SSL:8m;
	ssl_session_timeout 30m;

	# Sets the maximum number of concurrent HTTP/2 streams in a connection.
	http2_max_concurrent_streams 512;

	# Limits the maximum number of concurrent push requests in a connection. 
 	http2_max_concurrent_pushes 64;

	# Enable gzipping of responses.
	gzip on;

	# Set the Vary HTTP header as defined in the RFC 2616.
	gzip_vary on;

	# Enable checking the existence of precompressed files.
	#gzip_static on;

	gzip_comp_level 5;
	gzip_min_length 1024; 
	gzip_types text/css text/csv text/html text/javascript text/plain text/xml text/markdown text/json application/atom+xml application/json application/javascript application/x-javascript application/octet-stream application/pdf application/xhtml+xml application/xml application/msword;
	gzip_buffers 32 8k;
	gzip_proxied any;

	# Specifies the main log format.
	log_format main '$remote_addr($http_x_forwarded_for) -> $scheme://$http_host "$request" '
	'$status $body_bytes_sent $request_time "$http_referer" "$http_user_agent"';

	# Sets the path, format, and configuration for a buffered log write.
	access_log /var/log/nginx/access.log main;

	proxy_cache_path /var/cache/nginx levels=1:2 keys_zone=all:8m max_size=2g inactive=30d use_temp_path=off;

	# Задаёт версию протокола HTTP для проксирования. По умолчанию используется версия 1.0. 
	# Для работы постоянных соединений и проверки подлинности NTLM рекомендуется версия 1.1.
	proxy_http_version 1.0;

	# Задаёт число и размер буферов для одного соединения, в которые будет читаться ответ, получаемый от проксируемого сервера.
	# По умолчанию размер одного буфера равен размеру страницы. В зависимости от платформы это или 4K, или 8K. 
	proxy_buffers 64 64k;

    # Задаёт размер буфера, в который будет читаться первая часть ответа, получаемого от проксируемого сервера.
    # В этой части ответа находится, как правило, небольшой заголовок ответа.
    ## В нашем случае заголовки ответа могут быть большими (в приложении). Увеличиваем значение до 16k.
	proxy_buffer_size 16k;

	# Ограничивает суммарный размер буферов, которые могут быть заняты для отправки ответа клиенту, пока ответ ещё не прочитан целиком. 
	# Оставшиеся буферы тем временем могут использоваться для чтения ответа и, при необходимости, буферизации части ответа во временный файл.
	proxy_busy_buffers_size 256k;

    # Определяет, нужно ли писать в лог предупреждения о неинициализированных переменных.
    uninitialized_variable_warn off;

}
